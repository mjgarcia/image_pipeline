#! /usr/bin/env python

# set up parameters that we care about for stereo processing
# also change CMakelists.txt to find the dynamic_reconfigure stuff to process this file

PACKAGE='stereo_image_proc'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

# stereo and color processing modes
# third parameter is a "reconfig level", can indicate to a program using
#   dyn reconfig how serious a reconfig you need.
#   stereo_image_proc handles everything online with no hiccups
#
#gen.add("do_colorize", bool_t, 0, "Convert raw images to color",False)
#gen.add("do_rectify", bool_t, 0, "Rectify images",False)
#gen.add("do_stereo", bool_t, 0, "Perform stereo processing",False)
#gen.add("do_calc_points", bool_t, 0, "Calculate point cloud",False)
#gen.add("do_keep_coords", bool_t, 0, "Keep the image coordinates with the point cloud output",False)

# stereo algorithm output filtering parameters
gen.add("unique_thresh",     int_t, 0, "Uniqueness threshold, percent",36, 0, 100)
gen.add("texture_thresh",    int_t, 0, "Texture threshold, percent",30, 0, 100)
#gen.add("smoothness_thresh", int_t, 0, "Smoothness threshold, percent", 30, 0, 100)
gen.add("speckle_size",      int_t, 0, "Maximum size for speckle rejection, pixels",100, 0, 1000)
gen.add("speckle_diff",      int_t, 0, "Clustering max difference, disparity", 10, 0, 30)

# stereo algorithm correlation parameters
gen.add("horopter",  int_t, 0, "Search offset, pixels", 0, 0, 128)
gen.add("corr_size", int_t, 0, "Correlation window width, pixels", 15, 5, 21)
gen.add("num_disp",  int_t, 0, "Search range, pixels", 64, 32, 128)

# First string value is node name, used only for generating documentation
# Second string value ("StereoImageProc") is name of class and generated
#    .h file, with "Config" added, e.g., class StereoImageProcConfig (ugh!)
exit(gen.generate(PACKAGE, "stereo_image_proc", "StereoImageProc"))



